{"version":3,"sources":["component/Profile/ProfileInfo/ProfileInfo.module.css","component/Navbar/Navbar.module.css","component/Dialogs/Dialogs.module.css","reportWebVitals.ts","component/Navbar/Navbar.tsx","component/News/News.tsx","component/Settings/Settings.tsx","component/Music/Music.tsx","redux/dialogs-reducer.ts","component/Dialogs/DialogItem/DialogItem.tsx","component/Dialogs/Message/Message.tsx","utils/Validators.ts","component/common/FormsControls/FormsControls.tsx","component/Dialogs/AddMessageForm/AddMessageForm.tsx","component/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","component/Dialogs/DialogsContainer.tsx","api/api.ts","redux/users-reducer.ts","assets/images/img.ava.png","component/Users/Users.tsx","assets/images/preolader.svg","component/common/Preolader/Preolader.tsx","redux/users-selector.ts","component/Users/UsersContainer.tsx","redux/profile-reducer.ts","component/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","component/Profile/ProfileInfo/ProfileInfo.tsx","component/Profile/MyPost/Post/Post.tsx","component/Profile/AddNewPostForm/AddNewPostForm.tsx","component/Profile/MyPost/MyPost.tsx","component/Profile/MyPost/MyPostContainer.tsx","component/Profile/Profile.tsx","component/Profile/ProfileContainer.tsx","redux/auth-reducer.ts","component/Header/Header.tsx","component/Header/HeaderContainer.tsx","component/Login/Login.tsx","redux/app-reducer.ts","App.tsx","redux/sidebar-reducer.ts","redux/redux-store.ts","index.tsx","component/common/FormsControls/FormsControls.module.css","component/Users/User.module.css","component/Profile/MyPost/MyPost.module.css","component/Profile/MyPost/Post/Post.module.css","component/Header/Header.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Navbar","className","s","nav","item","to","activeClassName","activeLink","News","Settings","Music","SEND_MESSAGE","initialState","dialogs","id","v1","name","messages","message","dialogsReducer","state","action","type","newTextBody","messageText","DialogItem","props","path","_id","dialog","Message","required","value","maxLengthCreator","maxLength","length","FormsControlElementCreator","Element","input","meta","hasError","touched","error","spanError","FormControlTextarea","FormControlInput","maxLength50","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","validate","placeholder","Dialogs","dialogsElement","map","d","messagesElement","m","dialogItems","data","onSendMessageClick","mapStateToProps","isAuth","auth","compose","connect","dialogsPage","dispatch","sendMessageBodyAC","Component","restProps","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","response","follow","userId","post","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","authAPI","email","password","rememberMe","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_LOADING","TOGGLE_IS_FOLLOWING_PROGRESS","users","totalUsersCount","isLoading","followingInProgress","followSuccess","unfollowSuccess","setCurrentPage","toggleIsLoading","toggleFollowingProgress","usersReducer","u","followed","totalCount","filter","Users","pageCount","Math","ceil","pages","i","push","p","onClick","e","onPageChanged","selectedPage","src","photos","small","UsersPhoto","userPhoto","disabled","some","Preloader","preloader","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getTotalCount","getIsLoading","getFollowingInProgress","UsersContainer","pageNumber","this","log","React","page","a","items","ADD_POST","SET_USER_PROFILE","SET_STATUS","posts","likeCount","profile","setStatus","profileReducer","newPost","newPostText","postId","ProfileStatusWithHooks","useState","editMode","setEditMode","useEffect","onDoubleClick","autoFocus","onBlur","onChange","newValue","currentTarget","ProfileInfo","descriptionBlock","large","alt","Post","maxLength10","AddNewPostFormRedux","MyPost","memo","postsElement","reverse","postSBlock","addPost","MyPostContainer","profilePage","addPostAC","Profile","ProfileContainer","match","params","authorized","history","getUserProfile","resultCode","withRouter","SET_USER_DATA","login","setAuthUserData","payload","getAuthUserData","authReducer","Header","header","loginBlock","logout","HeaderContainer","LoginReduxForm","formError","stopSubmit","_error","formData","INITIALIZED_SUCCESS","initialized","appReducer","App","initializeApp","render","DialogsContainer","app","promise","Promise","all","sidebarReducer","rootReducer","combineReducers","sidebar","formReducer","store","createStore","applyMiddleware","thunk","window","setInterval","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9937cdbc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__mCDVR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__-j9ow\",\"item\":\"Navbar_item__2wT26\",\"activeLink\":\"Navbar_activeLink__3wkEg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__14mED\",\"dialogItems\":\"Dialogs_dialogItems__2irjQ\",\"dialog\":\"Dialogs_dialog__o9Lj_\",\"activeLink\":\"Dialogs_activeLink__1A7rC\",\"messages\":\"Dialogs_messages__3Edug\",\"message\":\"Dialogs_message__3gagr\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport s from \"./Navbar.module.css\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav className={s.nav}>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Messages</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/news\" activeClassName={s.activeLink}>News</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/music\" activeClassName={s.activeLink}>Music</NavLink>\r\n      </div>\r\n      <div className={s.item}>\r\n        <NavLink to=\"/settings\" activeClassName={s.activeLink}>Settings</NavLink>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport s from \"./News.module.css\"\r\n\r\nconst News = () => {\r\n  return (\r\n    <div>\r\n      News\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\nimport s from \"./Settings.module.css\"\r\n\r\nconst Settings = () => {\r\n  return (\r\n    <div>\r\n      Settings\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Settings;","import React from \"react\";\r\nimport s from \"./Musik.module.css\"\r\n\r\nconst Music = () => {\r\n  return (\r\n    <div>\r\n      Music\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Music;","import {v1} from \"uuid\";\r\n\r\nconst SEND_MESSAGE = \"SEND_MESSAGE\";\r\n\r\nexport type DialogsActionsTypes =\r\n  ReturnType<typeof sendMessageBodyAC>;\r\n\r\nexport type MessageType = {\r\n  message: string\r\n  id: string\r\n}\r\nexport type DialogType = {\r\n  name: string\r\n  id: string\r\n}\r\n\r\nexport type InitialStateType = {\r\n  dialogs: Array<DialogType>\r\n  messages: Array<MessageType>\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n  dialogs: [\r\n    {id: v1(), name: \"Dima\"},\r\n    {id: v1(), name: \"Sasha\"},\r\n    {id: v1(), name: \"Valera\"},\r\n    {id: v1(), name: \"Vika\"},\r\n    {id: v1(), name: \"Olya\"},\r\n    {id: v1(), name: \"Ulya\"}\r\n  ],\r\n  messages: [\r\n    {message: \"Hi\", id: v1()},\r\n    {message: \"How are you\", id: v1()},\r\n    {message: \"YO!!!\", id: v1()}\r\n  ]\r\n};\r\n\r\nconst dialogsReducer = (state: InitialStateType = initialState, action: DialogsActionsTypes): InitialStateType => {\r\n\r\n  switch (action.type) {\r\n    case SEND_MESSAGE: {\r\n      let newTextBody = action.messageText;\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, {id: v1(), message: newTextBody}]\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const sendMessageBodyAC = (messageText: string) => {\r\n  return {\r\n    type: SEND_MESSAGE,\r\n    messageText\r\n  } as const\r\n}\r\n\r\nexport default dialogsReducer;","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"../Dialogs.module.css\"\r\nimport {v1} from \"uuid\";\r\n\r\ntype DialogsItemType = {\r\n  name: string\r\n  _id: string\r\n}\r\n\r\nconst DialogItem = (props: DialogsItemType) => {\r\n  let path = \"/dialogs/\" + props._id;\r\n  return (\r\n    <div className={s.dialog}>\r\n      <NavLink to={path} activeClassName={s.activeLink}>{props.name}</NavLink>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DialogItem;","import React from \"react\";\r\n// import {NavLink} from \"react-router-dom\";\r\nimport s from \"../Dialogs.module.css\"\r\n// import {v1} from \"uuid\";\r\n\r\ntype  MessageType = {\r\n  message: string\r\n  _id: string\r\n}\r\n\r\nconst Message = (props: MessageType) => {\r\n  return (\r\n    <div className={s.message}>{props.message}</div>\r\n  )\r\n}\r\n\r\nexport default Message;\r\n","export const required = (value: string) => {\r\n  if (value) return undefined;\r\n  return \"Field is required\";\r\n}\r\n\r\nexport const  maxLengthCreator = (maxLength: number) => (value: string) => {\r\n  if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n  return undefined;\r\n}","import React, { InputHTMLAttributes } from \"react\";\r\nimport {WrappedFieldProps} from \"redux-form\";\r\nimport s from \"./FormsControls.module.css\";\r\n\r\n\r\nexport const FormsControlElementCreator = (Element: string) => ({input, meta, ...props}: WrappedFieldProps & InputHTMLAttributes<HTMLInputElement>) => {\r\n\r\n  const hasError = meta.touched && meta.error;\r\n\r\n  return (\r\n    <>\r\n    <Element className={hasError ? s.error : \"\"} {...input} {...props}/>\r\n      {hasError && <span className={s.spanError}>{meta.error}</span>}\r\n    </>\r\n  )\r\n}\r\n\r\nexport const FormControlTextarea = FormsControlElementCreator(\"textarea\");\r\nexport const FormControlInput = FormsControlElementCreator(\"input\");\r\n\r\n","import {maxLengthCreator, required} from \"../../../utils/Validators\";\r\nimport React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {FormControlTextarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {MessageFormDataType} from \"../Dialogs\";\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<MessageFormDataType>> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          component={FormControlTextarea}\r\n          validate={[required, maxLength50]}\r\n          name=\"messageText\"\r\n          placeholder=\"Enter your message\" />\r\n      </div>\r\n      <div><button>Send</button></div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm<MessageFormDataType>({form: \"dialogAddMessageForm\"})(AddMessageForm);","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogType, MessageType} from \"../../redux/dialogs-reducer\";\r\nimport {AddMessageFormRedux} from \"./AddMessageForm/AddMessageForm\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nexport type DialogsPropsType = {\r\n  dialogs: Array<DialogType>\r\n  messages: Array<MessageType>\r\n  onSendMessageClick: (messageText: string) => void\r\n  isAuth: boolean\r\n}\r\n\r\nexport type MessageFormDataType = {\r\n  messageText: string\r\n}\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n  let dialogsElement = props.dialogs.map(d => <DialogItem name={d.name} _id={d.id} key={d.id}/>)\r\n  let messagesElement = props.messages.map(m => <Message message={m.message} _id={m.id} key={m.id}/>)\r\n\r\n  // if (!props.isAuth) return <Redirect to=\"/login\" />\r\n\r\n  const addNewMessage = (data: MessageFormDataType) => {\r\n    props.onSendMessageClick(data.messageText);\r\n  }\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogItems}>\r\n        { dialogsElement }\r\n      </div>\r\n      <div className={s.messages}>\r\n        <div>{messagesElement}</div>\r\n\r\n        <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dialogs;","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n  isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n  return {\r\n    isAuth: state.auth.isAuth\r\n  }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n  const RedirectComponent = (props: MapStateToPropsType) => {\r\n    let {isAuth, ...restProps} = props;// !isAuth\r\n    if (!isAuth) return <Redirect to=\"/login\"/>\r\n    return <Component {...restProps as T}/>\r\n  }\r\n\r\n  let ConnectRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n  return ConnectRedirectComponent\r\n}","import React, {Dispatch} from \"react\";\r\nimport {sendMessageBodyAC,DialogType, MessageType} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport { RootStateType } from \"../../redux/redux-store\";\r\nimport { Action, compose } from \"redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\n\r\ntype MapStateToPropsType ={\r\n  dialogs: Array<DialogType>\r\n  messages: Array<MessageType>\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n  onSendMessageClick: (messageText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType): MapStateToPropsType=> {\r\n  return {\r\n    dialogs: state.dialogsPage.dialogs,\r\n    messages: state.dialogsPage.messages,\r\n  }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch<Action<string>>): MapDispatchToPropsType => {\r\n  return {\r\n    onSendMessageClick: (messageText) => {\r\n      dispatch(sendMessageBodyAC(messageText))\r\n    }\r\n  }\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs)\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  withCredentials: true,\r\n  baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n  headers: {\r\n    \"api-key\": \"70d80796-3f72-4c1c-8a51-937b510017ff\"\r\n  }\r\n});\r\n\r\nexport const usersAPI = {\r\n  getUsers(currentPage: number, pageSize: number) {\r\n    return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n      .then(response => {\r\n        return response.data;\r\n      });\r\n  },\r\n\r\n  follow(userId: number) {\r\n    return instance.post(`follow/${userId}`)\r\n  },\r\n\r\n  unfollow( userId: number) {\r\n    return instance.delete(`unfollow/${userId}`);\r\n  },\r\n\r\n  getProfile(userId: string) {\r\n    console.warn(\"Obsolete method. Please profileApi object\")\r\n    return profileAPI.getProfile(userId);\r\n  }\r\n}\r\n\r\nexport const profileAPI = {\r\n  getProfile(userId: string) {\r\n    return instance.get(`profile/` + userId);\r\n  },\r\n  getStatus(userId: string) {\r\n    return instance.get(`profile/status/` + userId);\r\n  },\r\n  updateStatus(status: string) {\r\n    return instance.put(`profile/status/`, {status});\r\n  }\r\n}\r\n\r\nexport const authAPI = {\r\n  me() {\r\n    return instance.get(`auth/me`);\r\n  },\r\n  logIn(email: string, password: string, rememberMe: boolean) {\r\n    return instance.post(`auth/login`, {email, password, rememberMe});\r\n  },\r\n  logOut() {\r\n    return instance.delete(`auth/login`);\r\n  }\r\n}\r\n","import {usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"react\";\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\";\r\nconst TOGGLE_IS_LOADING = \"TOGGLE_IS_LOADING\";\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE_IS_FOLLOWING_PROGRESS\";\r\n\r\nexport type UsersActionsTypes =\r\n  ReturnType<typeof followSuccess> |\r\n  ReturnType<typeof unfollowSuccess> |\r\n  ReturnType<typeof setUsers> |\r\n  ReturnType<typeof setCurrentPage> |\r\n  ReturnType<typeof setTotalUsersCount> |\r\n  ReturnType<typeof toggleIsLoading> |\r\n  ReturnType<typeof toggleFollowingProgress>\r\n\r\nexport type UsersType = {\r\n  name: string\r\n  id: number\r\n  uniqueUrlName: null\r\n  photos: {\r\n    small: string | null\r\n    large: string | null\r\n  }\r\n  status: null\r\n  followed: boolean\r\n}\r\n\r\ntype InitialStateType = {\r\n  users: Array<UsersType>\r\n  pageSize: number\r\n  totalUsersCount: number\r\n  currentPage: number\r\n  isLoading: boolean\r\n  followingInProgress: Array<number>\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n  users: [],\r\n  pageSize: 10,\r\n  totalUsersCount: 0,\r\n  currentPage: 1,\r\n  isLoading: true,\r\n  followingInProgress: []\r\n};\r\n\r\n//Reducer\r\nconst usersReducer = (state: InitialStateType = initialState, action: UsersActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case FOLLOW:\r\n      return {\r\n        ...state,\r\n        users: state.users.map(u => {\r\n          if (u.id === action.userId) {\r\n            return {...u, followed: true}\r\n          }\r\n          return u;\r\n        })\r\n      }\r\n\r\n    case UNFOLLOW:\r\n      return {\r\n        ...state,\r\n        users: state.users.map(u => {\r\n          if (u.id === action.userId) {\r\n            return {...u, followed: false}\r\n          }\r\n          return u;\r\n        })\r\n      }\r\n\r\n    case SET_USERS: {\r\n      return {...state, users: action.users}\r\n    }\r\n\r\n    case SET_CURRENT_PAGE: {\r\n      return {...state, currentPage: action.currentPage}\r\n    }\r\n\r\n    case SET_TOTAL_USERS_COUNT: {\r\n      return {...state, totalUsersCount: action.totalCount}\r\n    }\r\n\r\n    case TOGGLE_IS_LOADING: {\r\n      return {...state, isLoading: action.isLoading}\r\n    }\r\n\r\n    case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n      return {...state,\r\n        followingInProgress: action.isLoading\r\n          ? [...state.followingInProgress, action.userId]\r\n          : [...state.followingInProgress.filter(id => id !== action.userId)]}\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n\r\n\r\n// ActionCreator\r\nexport const  followSuccess = (userId: number) => {\r\n  return {\r\n    type: FOLLOW,\r\n    userId\r\n  } as const\r\n}\r\n\r\nexport const unfollowSuccess = (userId: number) => {\r\n  return {\r\n    type: UNFOLLOW,\r\n    userId\r\n  } as const\r\n}\r\n\r\nexport const setUsers = (users: Array<UsersType>) => {\r\n  return {\r\n    type: SET_USERS,\r\n    users\r\n  } as const\r\n}\r\n\r\nexport const setCurrentPage = (currentPage: number) => {\r\n  return {\r\n    type: SET_CURRENT_PAGE,\r\n    currentPage\r\n  } as const\r\n}\r\n\r\nexport const setTotalUsersCount = (totalCount: number) => {\r\n  return {\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    totalCount: totalCount\r\n  } as const\r\n}\r\n\r\nexport const toggleIsLoading = (isLoading: boolean) => {\r\n  return {\r\n    type: TOGGLE_IS_LOADING,\r\n    isLoading\r\n  } as const\r\n}\r\n\r\nexport const toggleFollowingProgress = (isLoading: boolean, userId: number) => {\r\n  return {\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isLoading,\r\n    userId\r\n  } as const\r\n}\r\n\r\n// thunk\r\nexport const requestUsers = (page: number, pageSize: number) => {\r\n  return async (dispatch: Dispatch<any>) => {\r\n    dispatch(toggleIsLoading(true));\r\n    dispatch(setCurrentPage(page));\r\n    let data = await usersAPI.getUsers(page, pageSize)\r\n    dispatch(toggleIsLoading(false));\r\n    dispatch(setUsers(data.items));\r\n    dispatch(setTotalUsersCount(data.totalCount));\r\n  }\r\n};\r\n\r\nconst followUnfollowFlow = async (dispatch: Dispatch<any>,userId: number, apiMethod: any, actionCreator: any) => {\r\n  dispatch(toggleFollowingProgress(true, userId));\r\n  let response = await apiMethod(userId)\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(actionCreator(userId));\r\n  }\r\n  dispatch(toggleFollowingProgress(false, userId))\r\n};\r\n\r\nexport const follow = (userId: number) => {\r\n  return async (dispatch: Dispatch<any>) => {\r\n    // let apiMethod = usersAPI.follow.bind(userId);\r\n    // let AC = followSuccess;//!!!\r\n    await followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(userId), followSuccess);// await\r\n\r\n  //   dispatch(toggleFollowingProgress(true, userId));\r\n  //   let response = await apiMethod(userId);\r\n  //\r\n  //   if (response.data.resultCode === 0) {\r\n  //     dispatch(AC(userId));\r\n  //   }\r\n  //   dispatch(toggleFollowingProgress(false, userId))\r\n  }\r\n};\r\n\r\nexport const unfollow = (userId: number) => {\r\n  return async (dispatch: Dispatch<any>) => {\r\n    // let apiMethod = usersAPI.unfollow.bind(userId);\r\n    // let AC = unfollowSuccess;//!!!\r\n    await followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(userId), unfollowSuccess);// await\r\n\r\n\r\n    // dispatch(toggleFollowingProgress(true, userId));\r\n    // let response = await apiMethod(userId);\r\n    //\r\n    // if (response.data.resultCode === 0) {\r\n    //   dispatch(AC(userId));\r\n    // }\r\n    // dispatch(toggleFollowingProgress(false, userId))\r\n  }\r\n};\r\n\r\nexport default usersReducer;","export default __webpack_public_path__ + \"static/media/img.ava.6ed02bbb.png\";","import s from \"./User.module.css\";\r\nimport UsersPhoto from \"../../assets/images/img.ava.png\";\r\nimport React from \"react\";\r\nimport {UsersType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type UsersPropsType = {\r\n  users: Array<UsersType>\r\n  unfollow: (id: number) => void\r\n  follow: (id: number) => void\r\n  onPageChanged: (p: number) => void\r\n  totalUsersCount: number\r\n  pageSize: number\r\n  currentPage: number\r\n  // toggleFollowingProgress: (isLoading: boolean, userId: number) => void\r\n  followingInProgress: Array<number>\r\n}\r\n\r\nconst Users = (props: UsersPropsType) => {\r\n\r\n  let pageCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n\r\n  let pages = [];\r\n  for (let i = 1; i <= pageCount; i++) {\r\n    pages.push(i)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n\r\n      <div>\r\n        {pages.map(p => {\r\n          return <span onClick={(e) => props.onPageChanged(p)}\r\n                       className={p === props.currentPage ? s.selectedPage : \"\"}>| {p} |</span>\r\n        })}\r\n      </div>\r\n\r\n      {props.users.map(u => <div key={u.id}>\r\n        <span>\r\n          <div>\r\n            <NavLink to={\"/profile/\" + u.id}>\r\n              <img src={u.photos.small !== null ? u.photos.small : UsersPhoto} className={s.userPhoto}/>\r\n            </NavLink>\r\n          </div>\r\n          <div>\r\n            {u.followed\r\n              ? <button disabled={props.followingInProgress\r\n                .some(id => id === u.id)}\r\n                        onClick={() => {props.unfollow(u.id)}}>Unfollow</button>\r\n\r\n              : <button disabled={props.followingInProgress\r\n                .some(id => id === u.id)}\r\n                        onClick={() => {props.follow(u.id)} }>Follow</button>}\r\n          </div>\r\n                </span>\r\n                <span>\r\n                <span>\r\n                <div>{u.name}</div>\r\n                <div>{u.status}</div>\r\n                </span>\r\n                <span>\r\n                <div>{\"u.location.country\"}</div>\r\n                <div>{\"u.location.city\"}</div>\r\n          </span>\r\n        </span>\r\n      </div>)}\r\n    </div>\r\n  )\r\n}\r\nexport default Users;","export default __webpack_public_path__ + \"static/media/preolader.b988d774.svg\";","import preloader from \"../../../assets/images/preolader.svg\";\r\nimport React from \"react\";\r\n\r\ntype PreloaderType = {}\r\n\r\nlet Preloader: React.FC<PreloaderType> = () => {\r\n return (\r\n   <>\r\n     <img src={preloader} />\r\n   </>\r\n )\r\n}\r\n\r\nexport default Preloader;","import {RootStateType} from \"./redux-store\";\r\nimport {createSelector} from \"reselect\";\r\n\r\nconst getUsersSelector = (state: RootStateType) => {\r\n  return state.usersPage.users\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector, (users) => {\r\n  return users.filter(u => true);\r\n})\r\n\r\nexport const getPageSize = (state: RootStateType) => {\r\n  return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: RootStateType) => {\r\n  return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: RootStateType) => {\r\n  return state.usersPage.currentPage\r\n}\r\n\r\nexport const getTotalCount = (state: RootStateType) => {\r\n  return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getIsLoading = (state: RootStateType) => {\r\n  return state.usersPage.isLoading\r\n}\r\n\r\nexport const getFollowingInProgress = (state: RootStateType) => {\r\n  return state.usersPage.followingInProgress\r\n}\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport store, {RootStateType} from \"../../redux/redux-store\";\r\nimport {\r\n  followSuccess,\r\n  setCurrentPage, toggleFollowingProgress,\r\n  unfollowSuccess,\r\n  UsersType, requestUsers,\r\n} from \"../../redux/users-reducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../common/Preolader/Preolader\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\nimport {\r\n  getCurrentPage, getFollowingInProgress, getIsLoading,\r\n  getPageSize, getTotalCount,\r\n  getTotalUsersCount, getUsers\r\n} from \"../../redux/users-selector\";\r\n\r\ntype MapStateToProps = {\r\n  users: Array<UsersType>\r\n  pageSize: number\r\n  totalUsersCount: number\r\n  currentPage: number\r\n  totalCount: number\r\n  isLoading: boolean\r\n  followingInProgress: Array<number>\r\n}\r\n\r\ntype UsersPropsType = {\r\n  users: Array<UsersType>\r\n  unfollowSuccess: (id: number) => void//\r\n  followSuccess: (id: number) => void\r\n  setCurrentPage: (currentPage: number) => void\r\n  totalUsersCount: number\r\n  pageSize: number\r\n  currentPage: number\r\n  isLoading: boolean\r\n  followingInProgress: Array<number>\r\n  getUsers: (currentPage: number, pageSize: number) => void\r\n}\r\n\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n  componentDidMount() {\r\n    this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n  }\r\n\r\n  onPageChanged = (pageNumber: number) => {\r\n    this.props.getUsers(pageNumber, this.props.pageSize); //тут запрос за новыми юзерами\r\n    this.props.setCurrentPage(pageNumber) //тут  мы устанавливаем новую страничку активной\r\n  }\r\n\r\n  render() {\r\n    console.log(\"ESERS\")\r\n    return <>\r\n      { this.props.isLoading ? <Preloader /> : null }\r\n      <Users totalUsersCount={this.props.totalUsersCount}\r\n             pageSize={this.props.pageSize}\r\n             currentPage={this.props.currentPage}\r\n             users={this.props.users}\r\n             onPageChanged={this.onPageChanged}\r\n             unfollow={this.props.unfollowSuccess}//\r\n             follow={this.props.followSuccess}\r\n             followingInProgress={this.props.followingInProgress}\r\n      />\r\n    </>\r\n  }\r\n}\r\n\r\n// let mapStateToProps = (state: RootStateType): MapStateToProps => {\r\n//   return {\r\n//     users: state.usersPage.users,\r\n//     pageSize: state.usersPage.pageSize,\r\n//     totalUsersCount: state.usersPage.totalUsersCount,\r\n//     currentPage: state.usersPage.currentPage,\r\n//     totalCount: state.usersPage.totalUsersCount,\r\n//     isLoading: state.usersPage.isLoading,\r\n//     followingInProgress: state.usersPage.followingInProgress\r\n//   }\r\n// }\r\n\r\nlet mapStateToProps = (state: RootStateType): MapStateToProps => {\r\n  console.log(\"mapStateTP USERSD\")\r\n\r\n  return {\r\n    users: getUsers(state),\r\n    // users: getUsersSuperSelector(state),\r\n    pageSize: getPageSize(state),\r\n    totalUsersCount: getTotalUsersCount(state),\r\n    currentPage: getCurrentPage(state),\r\n    totalCount: getTotalCount(state),\r\n    isLoading: getIsLoading(state),\r\n    followingInProgress: getFollowingInProgress(state)\r\n  }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, {\r\n    followSuccess,\r\n    unfollowSuccess,\r\n    setCurrentPage, //вот этот актион надо вызвать когда меняешь страничку\r\n    toggleFollowingProgress,\r\n    getUsers: requestUsers\r\n  }),\r\n  // withAuthRedirect,// да 'то защита? что,ы не авторизованный .зер не смог попасть на 'ту страничку\r\n)(UsersContainer)\r\n\r\n\r\n\r\n","import {v1} from \"uuid\";\r\nimport {Dispatch} from \"react\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst SET_USER_PROFILE = \"SET-USER-PROFILE\";\r\nconst SET_STATUS = \"SET-STATUS\";\r\nconst DELETE_POST = \"DELETE-POST\";\r\n\r\nexport type ProfileActionsTypes =\r\n  ReturnType<typeof addPostAC> |\r\n  ReturnType<typeof setUserProfile> |\r\n  ReturnType<typeof setStatus> |\r\n  ReturnType<typeof deletePost>\r\n\r\nexport type PostType = {\r\n  message: string\r\n  likeCount: number\r\n  id: string\r\n}\r\n\r\nexport type UserProfileType = {\r\n  userId: number\r\n  // lookingForAJob: boolean\r\n  // lookingForAJobDescription: string\r\n  // fullName: string\r\n  // contacts: {\r\n  //   github: string\r\n  //   vk: string\r\n  //   facebook: string\r\n  //   instagram: string\r\n  //   twitter: string\r\n  //   website: string\r\n  //   youtube: string\r\n  //   mainLink: string\r\n  // }\r\n  photos: {\r\n    small: string\r\n    large: string\r\n  }\r\n  status: string\r\n}\r\n\r\ntype InitialStateType = {\r\n  posts: Array<PostType>\r\n  profile: null | UserProfileType\r\n  status: string\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n  posts: [\r\n    {message: \"Hello! How are you\", likeCount: 5, id: v1()},\r\n    {message: \"It's my first post\", likeCount: 2, id: v1()},\r\n  ],\r\n  profile: null,\r\n  status: \"\"\r\n};\r\n\r\n\r\n//Reducer\r\nconst profileReducer = (state: InitialStateType = initialState, action: ProfileActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case ADD_POST: {\r\n      const newPost: PostType = {\r\n        id: v1(),\r\n        message: action.newPostText,\r\n        likeCount: 0\r\n      };\r\n      return {\r\n        ...state,\r\n        posts: [...state.posts, newPost]\r\n      };\r\n    }\r\n    case SET_USER_PROFILE: {\r\n      return {\r\n        ...state,\r\n        profile: action.profile\r\n      }\r\n    }\r\n    case SET_STATUS: {\r\n        return {\r\n          ...state,\r\n          status: action.status\r\n        }\r\n    }\r\n    case \"DELETE-POST\": {\r\n      return {\r\n        ...state,\r\n        posts: state.posts.filter(p => p.id != action.postId)\r\n      }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n//ActionCreator\r\nexport const addPostAC = (newPostText: string) => {\r\n  return {\r\n    type: ADD_POST,\r\n    newPostText\r\n  } as const\r\n}\r\nexport const setUserProfile = (profile: UserProfileType | null) => {\r\n  return {\r\n    type: SET_USER_PROFILE,\r\n    profile\r\n  } as const\r\n}\r\nexport const setStatus = (status: string) => {\r\n  return {\r\n    type: SET_STATUS,\r\n    status: status\r\n  } as const\r\n}\r\nexport const deletePost = (postId: string) => {\r\n  return {\r\n    type: DELETE_POST,\r\n    postId\r\n  } as const\r\n}\r\n\r\n//Thunk\r\nexport const getUserProfile = (userId: string) => async (dispatch: Dispatch<any>) => {\r\n  const response = await usersAPI.getProfile(userId);\r\n  dispatch(setUserProfile(response.data));\r\n}\r\n\r\nexport const getStatus = (userId: string) => async (dispatch: Dispatch<any>) => {\r\n  let response = await profileAPI.getStatus(userId);\r\n  dispatch(setStatus(response.data));\r\n}\r\n\r\nexport const updateStatus = (status: string) => async (dispatch: Dispatch<any>) => {\r\n  let response = await profileAPI.updateStatus(status);\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(setStatus(status));\r\n  }\r\n}\r\nexport default profileReducer;","import React, {useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusPropsType = {\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n}\r\n\r\n// type ProfileStatusStateType = {\r\n//   editMode: boolean\r\n//   localStatus: string\r\n// }\r\n\r\nconst ProfileStatusWithHooks = (props: ProfileStatusPropsType) => {\r\n  let [editMode, setEditMode] = useState(false)\r\n  let [status, setStatus] = useState(props.status)\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status)\r\n  }, [props.status])\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true)\r\n  }\r\n\r\n  const deactivateEditMode = () => {\r\n    setEditMode(false)\r\n    props.updateStatus(status);\r\n  }\r\n\r\n  const onStatusChange = (newValue: any) => { //!!!! string\r\n    setStatus(newValue.currentTarget.value)\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      {!editMode &&\r\n\t\t\t<div>\r\n\t\t\t\t<span onDoubleClick={activateEditMode}>{props.status || \"=====\"}</span>\r\n\t\t\t</div>\r\n      }\r\n      {editMode &&\r\n\t\t\t<div>\r\n\t\t\t\t<input autoFocus={true}\r\n\t\t\t\t       onBlur={deactivateEditMode}\r\n\t\t\t\t       onChange={onStatusChange}\r\n\t\t\t\t       value={status}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport { UserProfileType } from \"../../../redux/profile-reducer\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport Preloader from \"../../common/Preolader/Preolader\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfoType = {\r\n  profile: UserProfileType | null\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoType) => {\r\n  if (!props.profile) {\r\n    return <Preloader />\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {/*<div>*/}\r\n      {/*  <img src=\"https://tinypng.com/images/social/website.jpg\" alt=\"\"/>*/}\r\n      {/*</div>*/}\r\n      <div className={s.descriptionBlock}>\r\n        <img src={props.profile.photos.large} alt=\"profile\" />\r\n\r\n        <ProfileStatusWithHooks status={props.status}\r\n                       updateStatus={props.updateStatus}\r\n        />\r\n\r\n        {/*<ProfileStatus status={props.status}*/}\r\n        {/*               updateStatus={props.updateStatus}*/}\r\n        {/*/>*/}\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport s from \"./Post.module.css\";\r\n\r\nexport type PostType = {\r\n  message: string\r\n  likeCount: number\r\n}\r\n\r\nconst Post = (props: PostType) => {\r\n  return (\r\n      <div className={s.posts}>\r\n        <div className={s.item}>\r\n          <img src=\"https://hornews.com/images/news_large/c1d4b2b8ec608ea72764c5678816d5c9.jpg\" alt=\"\"/>\r\n          {props.message}\r\n          <div><span>{props.likeCount}</span></div>\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Post;","import {maxLengthCreator, required} from \"../../../utils/Validators\";\r\nimport React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {FormControlTextarea} from \"../../common/FormsControls/FormsControls\";\r\n// import {PostFormDateType} from \"../MyPost/MyPost\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nexport type PostFormDateType = {\r\n  newPostText: string\r\n}\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<PostFormDateType>> = (props) => {\r\n    return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          component={FormControlTextarea}\r\n          name=\"newPostText\"\r\n          validate={[required, maxLength10]}\r\n          placeholder={\"Post message\"}\r\n        />\r\n      </div>\r\n      <div>\r\n        <button>Add post</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport const AddNewPostFormRedux = reduxForm<PostFormDateType>({form: \"profileAddPostForm\"})(AddNewPostForm);\r\n","import React from \"react\";\r\nimport s from \"./MyPost.module.css\";\r\nimport {PostType} from \"../../../redux/profile-reducer\";\r\nimport Post from \"./Post/Post\";\r\nimport {AddNewPostFormRedux, PostFormDateType} from \"../AddNewPostForm/AddNewPostForm\";\r\n\r\nexport type MyPostPropsType = {\r\n  posts: Array<PostType>\r\n  addPost: (message: string) => void\r\n}\r\n\r\nconst MyPost = React.memo((props: MyPostPropsType) => {\r\n  console.log(\"RENDER\")\r\n  console.log(props)\r\n  let postsElement = [...props.posts]\r\n    .reverse()\r\n    .map(p => <Post key={p.id} message={p.message} likeCount={p.likeCount}/>);\r\n\r\n  let addPost = (data: PostFormDateType) => {\r\n    props.addPost(data.newPostText);\r\n  };\r\n\r\n  return (\r\n    <div className={s.postSBlock}>\r\n      <h3>My posts</h3>\r\n\r\n      <AddNewPostFormRedux onSubmit={addPost}/>\r\n\r\n      <div className={s.posts}>\r\n        {postsElement}\r\n      </div>\r\n    </div>\r\n  )\r\n});\r\n\r\nexport default MyPost;","import React, {Dispatch} from \"react\";\r\nimport {addPostAC, PostType} from \"../../../redux/profile-reducer\";\r\nimport MyPost from \"./MyPost\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../../redux/redux-store\";\r\nimport {Action} from \"redux\";\r\n\r\ntype MapStateToPropsType = {\r\n  posts: Array<PostType>\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n  addPost: (newPostText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType): MapStateToPropsType => {\r\n  return {\r\n    posts: state.profilePage.posts,\r\n  }\r\n};\r\n\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch<Action<string>>): MapDispatchToPropsType => {\r\n  return {\r\n    addPost: (newPostText: string) => {\r\n      dispatch(addPostAC(newPostText))\r\n    }\r\n  }\r\n};\r\n\r\nconst MyPostContainer = connect(mapStateToProps, mapDispatchToProps) (MyPost)\r\n\r\nexport default MyPostContainer;\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostContainer from \"./MyPost/MyPostContainer\";\r\nimport {UserProfileType} from \"../../redux/profile-reducer\";\r\nimport Login from \"../Login/Login\";\r\n\r\ntype ProfilePropsType = {\r\n  profile: UserProfileType | null\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n      />\r\n      <MyPostContainer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport {getStatus, getUserProfile, updateStatus, UserProfileType} from \"../../redux/profile-reducer\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"./../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n  profile: UserProfileType | null\r\n  status: string //\r\n  authorized: any\r\n  isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n  getUserProfile: (userId: string) => void\r\n  getStatus: (userId: string) => void\r\n  updateStatus: (status: string) => void\r\n}\r\n\r\ntype UserProfilePropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype PatchParamsType = {\r\n  userId: string\r\n}\r\n\r\ntype PropsType = RouteComponentProps<PatchParamsType> & UserProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n  componentDidMount() {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorized;\r\n      if (!userId) {\r\n        this.props.history.push(\"/login\")\r\n      }\r\n    }\r\n    this.props.getUserProfile(userId);\r\n    this.props.getStatus(userId);\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Profile {...this.props}\r\n                 profile={this.props.profile}\r\n                 status={this.props.status}\r\n                 updateStatus={this.props.updateStatus}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType): MapStatePropsType => {\r\n  // console.log(\"mapStateTP Profile\")\r\n  return {\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorized: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n  }\r\n};\r\n\r\nexport default compose<React.ComponentType>(\r\n  connect(mapStateToProps, {\r\n    getUserProfile,\r\n    getStatus,\r\n    updateStatus}),\r\n  withRouter,\r\n  // withAuthRedirect,\r\n)(ProfileContainer)\r\n","import {Dispatch} from \"react\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = \"samurai-network/auth/SET-USER-DATA\";\r\n\r\nexport type AuthActionsTypes =\r\n  ReturnType<typeof setAuthUserData>\r\n\r\nexport type AuthStateType = {\r\n  id: number | null,\r\n  email: string | null,\r\n  login: string | null,\r\n  isAuth: boolean\r\n}\r\n\r\nlet initialState = {\r\n  id: null,\r\n  email: null,\r\n  login: null,\r\n  isAuth: false\r\n};\r\n\r\n\r\n//Reducer\r\nexport const authReducer = (state: AuthStateType = initialState, action: AuthActionsTypes): AuthStateType => {\r\n  switch (action.type) {\r\n    case SET_USER_DATA:\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n//ActionCreator\r\nexport const setAuthUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n  return {\r\n    type: SET_USER_DATA,\r\n    payload: {id, email, login, isAuth}\r\n  } as const\r\n}\r\n\r\n//Thunk\r\nexport const getAuthUserData = () => async (dispatch: Dispatch<any>) => {\r\n  const response = await authAPI.me();\r\n  if (response.data.resultCode === 0) {\r\n    let {id, email, login} = response.data.data;\r\n    dispatch(setAuthUserData(id, email, login, true));\r\n  }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean) => async (dispatch: Dispatch<any>) => {\r\n  let response = await authAPI.logIn(email, password, rememberMe);\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(getAuthUserData());\r\n      } else {\r\n        let message = response.data.messages !== 0 ? response.data.messages[0] : \"some error\";\r\n       dispatch(stopSubmit(\"login\", {_error: message}));\r\n      }\r\n}\r\n\r\nexport const logout = () => async (dispatch: Dispatch<any>) => {\r\n  let response = await authAPI.logOut()\r\n      if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false));\r\n      }\r\n}\r\n\r\nexport default authReducer;","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./Header.module.css\";\r\nimport {HeaderContainerType} from \"./HeaderContainer\";\r\n\r\nconst  Header = (props: HeaderContainerType) => {\r\n  return (\r\n    <header className={s.header}>\r\n      <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRN5IdkZGOBECwRAqpYx6HH_Pr4Wy164El1Cg&usqp=CAU\" alt=\"\"/>\r\n      <div className={s.loginBlock}>\r\n        {props.isAuth\r\n          ? <div>{props.login} - <button onClick={props.logout}>LogOut</button></div>\r\n          : <NavLink to={\"/login\"}>Login</NavLink>\r\n        }\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapStateToPropsType = {\r\n  isAuth: boolean\r\n  login: string | null\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n  // getAuthUserData: () => void\r\n  logout: () => void\r\n}\r\n\r\nexport type HeaderContainerType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nclass HeaderContainer extends React.Component<HeaderContainerType> {\r\n  //\r\n  // componentDidMount() {\r\n  //   this.props.getAuthUserData()\r\n  // }\r\n\r\n  render() {\r\n    return (\r\n      <Header {...this.props}/>\r\n    )\r\n  }\r\n}\r\n\r\nconst MapStateToProps = (state: RootStateType): MapStateToPropsType => ({\r\n  isAuth: state.auth.isAuth,\r\n  login: state.auth.login,\r\n});\r\n\r\n\r\n\r\nexport default connect(MapStateToProps, {logout})(HeaderContainer);","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {FormControlInput} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/Validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {RootStateType} from \"../../redux/redux-store\";\r\nimport s from \"../common/FormsControls/FormsControls.module.css\"\r\n\r\ntype FormDataType = {\r\n  login: string\r\n  password: string\r\n  rememberMe: boolean\r\n}\r\n\r\ntype LoginPropsType = {\r\n  isAuth: boolean\r\n  login: (login: string, password: string, rememberMe: boolean) => void;\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <div>\r\n        <Field\r\n          placeholder=\"Email\"\r\n          name=\"login\"\r\n          component ={FormControlInput}\r\n          validate={[required]}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Field\r\n          placeholder=\"Password\"\r\n          name=\"password\"\r\n          component ={FormControlInput}\r\n          validate={[required]}\r\n          type=\"password\"\r\n        />\r\n      </div>\r\n      <div>\r\n        <Field type=\"checkbox\" name=\"rememberMe\" component={FormControlInput}/> remember me\r\n      </div>\r\n      <div>\r\n        {props.error && <div className={s.formError}>\r\n            {props.error}\r\n          </div> }\r\n\r\n\r\n        <button>Login</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: \"login\"})(LoginForm);\r\n\r\nconst Login = (props: LoginPropsType) => {\r\n\r\n  const onSubmit = (formData: FormDataType) => {\r\n    props.login(formData.login, formData.password, formData.rememberMe)\r\n    // console.log(formData)\r\n  }\r\n//если успешный логин то нужно отправить на профайл, а было на логин\r\n  if (props.isAuth) return <Redirect to=\"/profile\"/>\r\n\r\n  return <div>\r\n    <h1>LOGIN</h1>\r\n    <LoginReduxForm onSubmit={onSubmit}/>\r\n  </div>\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType) => ({\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login}) (Login);\r\n","import {Dispatch} from \"react\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = \"INITIALIZED-SUCCESS\";\r\n\r\n// export type AuthActionsTypes =\r\n//   ReturnType<typeof setAuthUserData>\r\n\r\nexport type InitStateType = {\r\n  initialized: boolean\r\n}\r\n\r\nlet initialState = {\r\n  initialized: false\r\n};\r\n\r\n\r\n//Reducer\r\nexport const appReducer = (state: InitStateType = initialState, action: any): InitStateType => {\r\n  switch (action.type) {\r\n    case INITIALIZED_SUCCESS:\r\n      return {\r\n        ...state,\r\n        initialized: true\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n//ActionCreator\r\nexport const initializedSuccess = () => {\r\n  return {\r\n    type: INITIALIZED_SUCCESS\r\n  } as const\r\n}\r\n\r\n//Thunk\r\nexport const initializeApp = () => (dispatch: Dispatch<any>) => {\r\n  let promise = dispatch(getAuthUserData());\r\n  Promise.all([promise]).then(() => {\r\n    dispatch(initializedSuccess())\r\n  })\r\n}\r\n\r\nexport default appReducer;","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Navbar from \"./component/Navbar/Navbar\";\r\nimport {Route, withRouter} from \"react-router-dom\";\r\nimport News from \"./component/News/News\";\r\nimport Settings from \"./component/Settings/Settings\";\r\nimport Music from \"./component/Music/Music\";\r\nimport DialogsContainer from \"./component/Dialogs/DialogsContainer\";\r\nimport UsersContainer from \"./component/Users/UsersContainer\";\r\nimport ProfileContainer from \"./component/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./component/Header/HeaderContainer\";\r\nimport Login from \"./component/Login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport {RootStateType} from \"./redux/redux-store\";\r\nimport Preloader from \"./component/common/Preolader/Preolader\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n  initialized: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n  initializeApp: () => void,\r\n  initialized: false\r\n}\r\n\r\nexport type AppContainerType = MapDispatchToPropsType\r\n\r\nclass App extends React.Component<AppContainerType> {\r\n\r\n  componentDidMount() {\r\n    this.props.initializeApp()\r\n  }\r\n\r\n  render() {\r\n    if (!this.props.initialized) {\r\n      return <Preloader/>\r\n    }\r\n    return (\r\n      <div className=\"app-wrapper\">\r\n        <HeaderContainer/>\r\n        <Navbar/>\r\n        <div className=\"app-wrapper-content\">\r\n          <Route path=\"/dialogs\" render={() => <DialogsContainer/>}/>\r\n          <Route path=\"/profile/:userId?\" render={() => <ProfileContainer/>}/>\r\n          <Route path=\"/users\" render={() => <UsersContainer/>}/>\r\n          <Route path=\"/login\" render={() => <Login/>}/>\r\n          <Route path=\"/news\" render={() => <News/>}/>\r\n          <Route path=\"/music\" render={() => <Music/>}/>\r\n          <Route path=\"/settings\" render={() => <Settings/>}/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: RootStateType): MapStatePropsType => ({\r\n  initialized: state.app.initialized\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n  withRouter,\r\n  connect(mapStateToProps, {initializeApp})\r\n)(App);\r\n","let initialState = {};\r\n\r\nconst sidebarReducer = (state: any = initialState, action: any) => {\r\n\r\n  return state\r\n}\r\n\r\nexport default sidebarReducer;","import {applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  sidebar: sidebarReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  form: formReducer,\r\n  app: appReducer\r\n});\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport let store = createStore(rootReducer, applyMiddleware(thunk))\r\nexport type ReduxStoreType = typeof store // новый тип (redux)\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n\r\nexport default store;","import React from 'react';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport ReactDOM from \"react-dom\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport store from \"./redux/redux-store\";\r\nimport {Provider} from \"react-redux\";\r\n\r\n\r\n  setInterval(() => {\r\n    store.dispatch({type: \"FAKE\"})\r\n  }, 1000)\r\n\r\n  ReactDOM.render(\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n  );\r\n\r\n//\r\n// let renderTree = (state: RootStateType) => {\r\n//   ReactDOM.render(\r\n//     <BrowserRouter>\r\n//       <Provider store={store}>\r\n//         <App />\r\n//       </Provider>\r\n//     </BrowserRouter>,\r\n//     document.getElementById('root')\r\n//   );\r\n// }\r\n//\r\n// renderTree(store.getState());\r\n//\r\n// store.subscribe(() => {\r\n//   let state = store.getState();\r\n//   renderTree(state);\r\n// });\r\n\r\n\r\n// store.subscribe(renderTree);\r\n// renderTree()\r\n\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormsControls_error__3K5FN\",\"spanError\":\"FormsControls_spanError__8FK-Q\",\"formError\":\"FormsControls_formError__1aA0N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"User_userPhoto__3AbgZ\",\"selectedPage\":\"User_selectedPage__FURyr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postSBlock\":\"MyPost_postSBlock__2FrxT\",\"posts\":\"MyPost_posts__3rTno\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2DQhv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2UrMp\",\"loginBlock\":\"Header_loginBlock__1VvdV\"};"],"sourceRoot":""}